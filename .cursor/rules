# Cursor IDE Rules for TypeScript, React, and Next.js Projects

## 🎯 Project Overview

This is a Next.js 14 application with TypeScript, Tailwind CSS, and React for the Cursor Italy meetup website.

## 📁 Project Structure

- `src/app/` - Next.js App Router pages and layouts
- `src/components/` - Reusable React components
- `src/lib/` - Utilities, types, and configurations
- `content/` - Markdown content files
- `public/` - Static assets and images
- `design/` - Design assets and inspiration

## 🛠️ Technology Stack

- **Framework**: Next.js 14 with App Router
- **Language**: TypeScript (strict mode)
- **Styling**: Tailwind CSS with custom design system
- **Content**: Markdown-based CMS
- **Icons**: Lucide React
- **Font**: Inter (optimized with Next.js font system)

## 🎨 Design System

- **Colors**: Milano-inspired gradient (teal → blue → pink)
- **Typography**: Inter font family
- **Components**: Card-based layout with hover effects
- **Responsive**: Mobile-first approach

## 📝 TypeScript Best Practices

### Type Definitions

- Always define proper interfaces for props and data structures
- Use strict TypeScript configuration
- Prefer interfaces over types for object shapes
- Export types from dedicated type files

### Component Patterns

```typescript
// ✅ Good: Proper interface definition
interface ComponentProps {
  title: string;
  description?: string;
  children: React.ReactNode;
}

// ✅ Good: Proper component typing
const Component: React.FC<ComponentProps> = ({ title, description, children }) => {
  return <div>{children}</div>;
};
```

### Error Handling

- Use proper error boundaries
- Handle async operations with try-catch
- Provide meaningful error messages
- Use TypeScript's strict null checks

## ⚛️ React Best Practices

### Component Structure

- Use functional components with hooks
- Keep components small and focused
- Extract reusable logic into custom hooks
- Use proper prop drilling or context as needed

### State Management

- Use React hooks (useState, useEffect, useContext)
- Keep state as local as possible
- Use proper dependency arrays in useEffect
- Avoid unnecessary re-renders

### Performance

- Use React.memo for expensive components
- Implement proper key props for lists
- Use useCallback and useMemo when appropriate
- Optimize images with Next.js Image component

### Code Organization

```typescript
// ✅ Good: Organized component structure
import React from 'react';
import { ComponentProps } from './types';
import { useCustomHook } from './hooks';
import styles from './Component.module.css';

const Component: React.FC<ComponentProps> = ({ prop1, prop2 }) => {
  const { data, loading } = useCustomHook();
  
  if (loading) return <div>Loading...</div>;
  
  return (
    <div className={styles.container}>
      {/* Component content */}
    </div>
  );
};

export default Component;
```

## 🎯 Next.js Best Practices

### App Router Patterns

- Use proper page and layout structure
- Implement proper metadata for SEO
- Use server components when possible
- Handle loading and error states

### File Organization

```
src/app/
├── layout.tsx          # Root layout
├── page.tsx           # Home page
├── about/
│   └── page.tsx      # About page
├── events/
│   └── page.tsx      # Events page
└── globals.css        # Global styles
```

### Data Fetching

- Use server components for data fetching
- Implement proper caching strategies
- Handle loading and error states
- Use proper TypeScript for API responses

## 🎨 Styling Guidelines

### Tailwind CSS

- Use utility classes for styling
- Create custom components for repeated patterns
- Use consistent spacing and color scales
- Implement responsive design patterns

### Custom CSS

- Use CSS modules for component-specific styles
- Implement proper CSS custom properties
- Follow BEM methodology when needed
- Use proper CSS-in-JS patterns

### Design System

```css
/* ✅ Good: Consistent design tokens */
:root {
  --color-primary: #007ACC;
  --color-secondary: #00D4AA;
  --spacing-xs: 0.25rem;
  --spacing-sm: 0.5rem;
  --spacing-md: 1rem;
  --spacing-lg: 1.5rem;
  --spacing-xl: 2rem;
}
```

## 📚 Content Management

### Markdown Structure

- Use frontmatter for metadata
- Implement proper content validation
- Use consistent markdown formatting
- Handle images and assets properly

### Content Types

```typescript
// ✅ Good: Proper content type definitions
interface Event {
  slug: string;
  title: string;
  date: string;
  location: string;
  description: string;
  speakers?: Speaker[];
  published: boolean;
}
```

## 🔧 Development Workflow

### Code Quality

- Use ESLint with TypeScript rules
- Implement Prettier for code formatting
- Use proper Git commit messages
- Review code before merging

### Testing

- Write unit tests for utilities
- Test components with React Testing Library
- Implement integration tests for critical paths
- Use proper mocking strategies

### Performance

- Optimize bundle size
- Implement proper image optimization
- Use Next.js built-in performance features
- Monitor Core Web Vitals

## 🚀 Deployment

### Environment

- Use proper environment variables
- Implement proper build optimization
- Use Next.js static generation when possible
- Implement proper error monitoring

### CI/CD

- Use GitHub Actions for automation
- Implement proper testing in CI
- Use semantic versioning
- Implement proper deployment strategies

## 📖 Documentation

### Code Comments

- Use JSDoc for complex functions
- Document component props
- Explain business logic
- Keep comments up to date

### README

- Maintain comprehensive README
- Document setup instructions
- Include API documentation
- Provide contribution guidelines

## 🔒 Security

### Best Practices

- Validate all user inputs
- Use proper authentication
- Implement proper authorization
- Sanitize data before rendering

### Dependencies

- Keep dependencies updated
- Use npm audit regularly
- Implement proper vulnerability scanning
- Use trusted packages only

## 🎯 Accessibility

### Standards

- Follow WCAG 2.1 AA guidelines
- Use proper semantic HTML
- Implement keyboard navigation
- Provide proper alt text for images

### Testing

- Use accessibility testing tools
- Test with screen readers
- Implement proper focus management
- Use proper ARIA attributes

## 📱 Responsive Design

### Breakpoints

- Mobile-first approach
- Use Tailwind's responsive utilities
- Test on multiple devices
- Implement proper touch targets

### Performance

- Optimize images for different screen sizes
- Use proper lazy loading
- Implement proper caching
- Monitor performance metrics

## 🔍 SEO

### Meta Tags

- Use proper title and description
- Implement Open Graph tags
- Use structured data
- Optimize for search engines

### Performance

- Optimize Core Web Vitals
- Implement proper caching
- Use Next.js optimization features
- Monitor search console

## 🧪 Testing Strategy

### Unit Tests

- Test utility functions
- Test component logic
- Use proper mocking
- Maintain good test coverage

### Integration Tests

- Test user workflows
- Test API integrations
- Test error scenarios
- Use proper test data

### E2E Tests

- Test critical user journeys
- Test cross-browser compatibility
- Test responsive design
- Use proper test automation

## 📊 Monitoring

### Performance

- Monitor Core Web Vitals
- Track user interactions
- Monitor error rates
- Use proper analytics

### Error Tracking

- Implement proper error boundaries
- Use error tracking services
- Monitor application health
- Implement proper logging

## 🔄 Version Control

### Git Workflow

- Use feature branches
- Write descriptive commit messages
- Use proper PR templates
- Implement proper code review

### Branching Strategy

- main: production-ready code
- develop: integration branch
- feature/*: new features
- hotfix/*: urgent fixes

## 📦 Package Management

### Dependencies

- Keep dependencies updated
- Use proper versioning
- Audit dependencies regularly
- Use lock files

### Scripts

- Use proper npm scripts
- Implement proper build process
- Use proper development tools
- Implement proper testing scripts

## 🎨 UI/UX Guidelines

### Design Principles

- Follow material design principles
- Use consistent spacing
- Implement proper color contrast
- Use proper typography hierarchy

### User Experience

- Implement proper loading states
- Use proper error handling
- Provide clear feedback
- Implement proper navigation

## 🔧 Development Tools

### IDE Configuration

- Use proper TypeScript configuration
- Implement proper linting rules
- Use proper formatting tools
- Configure proper debugging

### Debugging

- Use proper debugging tools
- Implement proper logging
- Use proper error tracking
- Implement proper monitoring

## 📈 Performance Optimization

### Bundle Size

- Use proper code splitting
- Implement proper tree shaking
- Use proper lazy loading
- Monitor bundle size

### Runtime Performance

- Optimize React rendering
- Use proper memoization
- Implement proper caching
- Monitor performance metrics

## 🔐 Security Guidelines

### Data Protection

- Validate all inputs
- Sanitize data
- Use proper authentication
- Implement proper authorization

### Dependencies

- Keep dependencies updated
- Use npm audit
- Implement proper scanning
- Use trusted packages

## 🌐 Internationalization

### i18n Strategy

- Use proper i18n libraries
- Implement proper translations
- Use proper date formatting
- Implement proper number formatting

### Accessibility

- Use proper language attributes
- Implement proper RTL support
- Use proper cultural considerations
- Implement proper accessibility

## 📱 Mobile Optimization

### Performance

- Optimize for mobile networks
- Use proper image optimization
- Implement proper caching
- Monitor mobile performance

### User Experience

- Implement proper touch targets
- Use proper mobile navigation
- Implement proper mobile gestures
- Test on multiple devices

## 🎯 Code Review Guidelines

### Review Checklist

- [ ] Code follows TypeScript best practices
- [ ] Components are properly typed
- [ ] Styling follows design system
- [ ] Performance is optimized
- [ ] Accessibility is implemented
- [ ] Tests are included
- [ ] Documentation is updated

### Review Process

- Use proper PR templates
- Implement proper review process
- Use proper feedback mechanisms
- Implement proper approval process

## 🚀 Deployment Checklist

### Pre-deployment

- [ ] All tests pass
- [ ] Code is reviewed
- [ ] Performance is optimized
- [ ] Security is validated
- [ ] Documentation is updated

### Post-deployment

- [ ] Monitor application health
- [ ] Check error rates
- [ ] Monitor performance
- [ ] Validate functionality

## 📚 Learning Resources

### TypeScript

- Official TypeScript documentation
- TypeScript Deep Dive
- TypeScript Design Patterns
- Advanced TypeScript features

### React

- Official React documentation
- React patterns and best practices
- React performance optimization
- React testing strategies

### Next.js

- Official Next.js documentation
- Next.js App Router guide
- Next.js optimization techniques
- Next.js deployment strategies

### General

- Clean Code principles
- SOLID principles
- Design patterns
- Testing strategies

## 🎯 Project-Specific Guidelines

### Cursor Italy Website

- Follow the Milano-inspired design system
- Use Inter font consistently
- Implement proper event management
- Maintain community-focused content
- Ensure accessibility for all users
- Optimize for Italian audience
- Implement proper SEO for meetup events
- Use proper social media integration

### Content Guidelines

- Write clear, engaging content
- Use proper Italian language when needed
- Maintain professional tone
- Include proper call-to-actions
- Use proper imagery and branding
- Implement proper event descriptions
- Maintain community guidelines
- Use proper speaker information

### Technical Guidelines

- Use Next.js 14 features effectively
- Implement proper TypeScript patterns
- Use Tailwind CSS consistently
- Optimize for performance
- Implement proper SEO
- Use proper accessibility patterns
- Maintain proper code organization
- Follow proper testing strategies
